// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/lst/v1/pending.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PendingRedemption represents a pending redemption operation
type PendingRedemption struct {
	// id is the unique identifier for this pending operation
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// basket_id is the ID of the basket being redeemed from
	BasketId string `protobuf:"bytes,2,opt,name=basket_id,json=basketId,proto3" json:"basket_id,omitempty"`
	// delegator is the address requesting the redemption
	Delegator string `protobuf:"bytes,3,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// shares_burned is the amount of basket shares that were burned
	SharesBurned cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=shares_burned,json=sharesBurned,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares_burned"`
	// tokens_to_receive is the amount of TIA tokens to be received
	TokensToReceive cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=tokens_to_receive,json=tokensToReceive,proto3,customtype=cosmossdk.io/math.Int" json:"tokens_to_receive"`
	// completion_time is when the unbonding will complete
	CompletionTime time.Time `protobuf:"bytes,6,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
	// creation_time is when this redemption was requested
	CreationTime time.Time `protobuf:"bytes,7,opt,name=creation_time,json=creationTime,proto3,stdtime" json:"creation_time"`
}

func (m *PendingRedemption) Reset()         { *m = PendingRedemption{} }
func (m *PendingRedemption) String() string { return proto.CompactTextString(m) }
func (*PendingRedemption) ProtoMessage()    {}
func (*PendingRedemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1785784170ae6c3, []int{0}
}
func (m *PendingRedemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingRedemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingRedemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingRedemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingRedemption.Merge(m, src)
}
func (m *PendingRedemption) XXX_Size() int {
	return m.Size()
}
func (m *PendingRedemption) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingRedemption.DiscardUnknown(m)
}

var xxx_messageInfo_PendingRedemption proto.InternalMessageInfo

func (m *PendingRedemption) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PendingRedemption) GetBasketId() string {
	if m != nil {
		return m.BasketId
	}
	return ""
}

func (m *PendingRedemption) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *PendingRedemption) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

func (m *PendingRedemption) GetCreationTime() time.Time {
	if m != nil {
		return m.CreationTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*PendingRedemption)(nil), "celestia.lst.v1.PendingRedemption")
}

func init() { proto.RegisterFile("celestia/lst/v1/pending.proto", fileDescriptor_c1785784170ae6c3) }

var fileDescriptor_c1785784170ae6c3 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x6b, 0xdb, 0x30,
	0x18, 0x86, 0xe3, 0xb4, 0xeb, 0x1a, 0xad, 0x6d, 0xa8, 0xe9, 0xc0, 0x4b, 0x99, 0x13, 0x76, 0x0a,
	0x8c, 0x48, 0x64, 0x83, 0xdd, 0x17, 0x7a, 0x31, 0x6c, 0x30, 0xbc, 0xb2, 0xc1, 0x2e, 0x46, 0x96,
	0xbe, 0x29, 0x22, 0xb6, 0x65, 0x24, 0x25, 0xac, 0xff, 0xa2, 0x3f, 0xa6, 0xff, 0x60, 0x97, 0x1e,
	0x4b, 0x4f, 0x63, 0x87, 0x6c, 0x24, 0x7f, 0x64, 0xd8, 0xb2, 0x97, 0xc1, 0x4e, 0xbd, 0xe9, 0xf3,
	0xfb, 0xbd, 0xcf, 0x6b, 0x5e, 0x3e, 0xf4, 0x9c, 0x41, 0x06, 0xc6, 0x4a, 0x4a, 0x32, 0x63, 0xc9,
	0x6a, 0x4a, 0x4a, 0x28, 0xb8, 0x2c, 0x04, 0x2e, 0xb5, 0xb2, 0xca, 0xef, 0xb7, 0x32, 0xce, 0x8c,
	0xc5, 0xab, 0xe9, 0xe0, 0x4c, 0x28, 0xa1, 0x6a, 0x8d, 0x54, 0x2f, 0xb7, 0x36, 0x78, 0xc6, 0x94,
	0xc9, 0x95, 0x49, 0x9c, 0xe0, 0x86, 0x46, 0x1a, 0x0a, 0xa5, 0x44, 0x06, 0xa4, 0x9e, 0xd2, 0xe5,
	0x57, 0x62, 0x65, 0x0e, 0xc6, 0xd2, 0xbc, 0x74, 0x0b, 0x2f, 0xbe, 0xef, 0xa1, 0xd3, 0x0f, 0x2e,
	0x34, 0x06, 0x0e, 0x79, 0x69, 0xa5, 0x2a, 0xfc, 0x13, 0xd4, 0x95, 0x3c, 0xf0, 0x46, 0xde, 0x78,
	0x3f, 0xee, 0x4a, 0xee, 0x9f, 0xa3, 0x5e, 0x4a, 0xcd, 0x02, 0x6c, 0x22, 0x79, 0xd0, 0x1d, 0x79,
	0xe3, 0x5e, 0x7c, 0xe8, 0x3e, 0x44, 0xdc, 0x7f, 0x83, 0x7a, 0x1c, 0x32, 0x10, 0xd4, 0x2a, 0x1d,
	0xec, 0x55, 0xe2, 0x2c, 0xb8, 0xbf, 0x99, 0x9c, 0x35, 0x3f, 0xf2, 0x96, 0x73, 0x0d, 0xc6, 0x7c,
	0xb4, 0xba, 0xca, 0xd8, 0xad, 0xfa, 0x9f, 0xd0, 0xb1, 0x99, 0x53, 0x0d, 0x26, 0x49, 0x97, 0xba,
	0x00, 0x1e, 0xec, 0xd7, 0xde, 0xe9, 0xed, 0x7a, 0xd8, 0xf9, 0xb9, 0x1e, 0x9e, 0x3b, 0xbf, 0xe1,
	0x0b, 0x2c, 0x15, 0xc9, 0xa9, 0x9d, 0xe3, 0x77, 0x20, 0x28, 0xbb, 0xba, 0x00, 0x76, 0x7f, 0x33,
	0x41, 0x0d, 0xfe, 0x02, 0x58, 0x7c, 0xe4, 0x38, 0xb3, 0x1a, 0xe3, 0x7f, 0x46, 0xa7, 0x56, 0x2d,
	0xa0, 0x30, 0x89, 0x55, 0x89, 0x06, 0x06, 0x72, 0x05, 0xc1, 0xa3, 0x9a, 0xfd, 0xb2, 0x61, 0x3f,
	0xfd, 0x9f, 0x1d, 0x15, 0xf6, 0x1f, 0x6a, 0x54, 0xd8, 0xb8, 0xef, 0x28, 0x97, 0x2a, 0x76, 0x0c,
	0xff, 0x3d, 0xea, 0x33, 0x95, 0x97, 0x19, 0x54, 0x1d, 0x25, 0x55, 0x93, 0xc1, 0xc1, 0xc8, 0x1b,
	0x3f, 0x79, 0x35, 0xc0, 0xae, 0x66, 0xdc, 0xd6, 0x8c, 0x2f, 0xdb, 0x9a, 0x67, 0x87, 0x55, 0xe4,
	0xf5, 0xaf, 0xa1, 0x17, 0x9f, 0xec, 0xcc, 0x95, 0xec, 0x47, 0xe8, 0x98, 0x69, 0xa0, 0x3b, 0xd8,
	0xe3, 0x07, 0xc0, 0x8e, 0x5a, 0x6b, 0x25, 0xce, 0xa2, 0xdb, 0x4d, 0xe8, 0xdd, 0x6d, 0x42, 0xef,
	0xf7, 0x26, 0xf4, 0xae, 0xb7, 0x61, 0xe7, 0x6e, 0x1b, 0x76, 0x7e, 0x6c, 0xc3, 0xce, 0x17, 0x22,
	0xa4, 0x9d, 0x2f, 0x53, 0xcc, 0x54, 0x4e, 0xda, 0x6b, 0x52, 0x5a, 0xfc, 0x7d, 0x4f, 0x68, 0x59,
	0x92, 0x6f, 0xf5, 0xf9, 0xd9, 0xab, 0x12, 0x4c, 0x7a, 0x50, 0xc7, 0xbe, 0xfe, 0x13, 0x00, 0x00,
	0xff, 0xff, 0xdf, 0x98, 0x01, 0xe2, 0x9b, 0x02, 0x00, 0x00,
}

func (m *PendingRedemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingRedemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingRedemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPending(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPending(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	{
		size := m.TokensToReceive.Size()
		i -= size
		if _, err := m.TokensToReceive.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.SharesBurned.Size()
		i -= size
		if _, err := m.SharesBurned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPending(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintPending(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BasketId) > 0 {
		i -= len(m.BasketId)
		copy(dAtA[i:], m.BasketId)
		i = encodeVarintPending(dAtA, i, uint64(len(m.BasketId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPending(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPending(dAtA []byte, offset int, v uint64) int {
	offset -= sovPending(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PendingRedemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPending(uint64(m.Id))
	}
	l = len(m.BasketId)
	if l > 0 {
		n += 1 + l + sovPending(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovPending(uint64(l))
	}
	l = m.SharesBurned.Size()
	n += 1 + l + sovPending(uint64(l))
	l = m.TokensToReceive.Size()
	n += 1 + l + sovPending(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovPending(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreationTime)
	n += 1 + l + sovPending(uint64(l))
	return n
}

func sovPending(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPending(x uint64) (n int) {
	return sovPending(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PendingRedemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPending
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingRedemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingRedemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesBurned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesBurned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensToReceive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPending
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensToReceive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPending
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPending
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPending
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPending
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPending(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPending
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPending(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPending
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPending
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPending
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPending
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPending
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPending
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPending        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPending          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPending = fmt.Errorf("proto: unexpected end of group")
)
