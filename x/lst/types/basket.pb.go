// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celestia/lst/v1/basket.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Basket represents a liquid staking token backed by multiple validators
type Basket struct {
	// id is the unique identifier for this basket
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// denom is the token denomination for this basket (e.g., "bTIA-1")
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// validators is the list of validator addresses in this basket
	Validators []ValidatorWeight `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators"`
	// total_shares is the total number of basket tokens issued
	TotalShares cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=total_shares,json=totalShares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total_shares"`
	// total_staked_tokens is the total amount of TIA staked by this basket
	TotalStakedTokens cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=total_staked_tokens,json=totalStakedTokens,proto3,customtype=cosmossdk.io/math.Int" json:"total_staked_tokens"`
	// creator is the address of the basket creator
	Creator string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	// creation_time is when the basket was created
	CreationTime int64 `protobuf:"varint,7,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// metadata contains optional descriptive information
	Metadata *BasketMetadata `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Basket) Reset()         { *m = Basket{} }
func (m *Basket) String() string { return proto.CompactTextString(m) }
func (*Basket) ProtoMessage()    {}
func (*Basket) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb2e83b17a501f02, []int{0}
}
func (m *Basket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Basket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Basket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Basket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Basket.Merge(m, src)
}
func (m *Basket) XXX_Size() int {
	return m.Size()
}
func (m *Basket) XXX_DiscardUnknown() {
	xxx_messageInfo_Basket.DiscardUnknown(m)
}

var xxx_messageInfo_Basket proto.InternalMessageInfo

func (m *Basket) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Basket) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Basket) GetValidators() []ValidatorWeight {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *Basket) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Basket) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Basket) GetMetadata() *BasketMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// ValidatorWeight defines a validator and its weight in the basket
type ValidatorWeight struct {
	// validator_address is the operator address of the validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// weight is the relative weight of this validator in the basket
	Weight cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight"`
}

func (m *ValidatorWeight) Reset()         { *m = ValidatorWeight{} }
func (m *ValidatorWeight) String() string { return proto.CompactTextString(m) }
func (*ValidatorWeight) ProtoMessage()    {}
func (*ValidatorWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb2e83b17a501f02, []int{1}
}
func (m *ValidatorWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorWeight.Merge(m, src)
}
func (m *ValidatorWeight) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorWeight.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorWeight proto.InternalMessageInfo

func (m *ValidatorWeight) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// BasketMetadata contains optional metadata for a basket
type BasketMetadata struct {
	// name is a human-readable name for the basket
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// description provides additional details about the basket
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// symbol is a short identifier for the basket token
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *BasketMetadata) Reset()         { *m = BasketMetadata{} }
func (m *BasketMetadata) String() string { return proto.CompactTextString(m) }
func (*BasketMetadata) ProtoMessage()    {}
func (*BasketMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb2e83b17a501f02, []int{2}
}
func (m *BasketMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasketMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasketMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasketMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasketMetadata.Merge(m, src)
}
func (m *BasketMetadata) XXX_Size() int {
	return m.Size()
}
func (m *BasketMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BasketMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BasketMetadata proto.InternalMessageInfo

func (m *BasketMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BasketMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BasketMetadata) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func init() {
	proto.RegisterType((*Basket)(nil), "celestia.lst.v1.Basket")
	proto.RegisterType((*ValidatorWeight)(nil), "celestia.lst.v1.ValidatorWeight")
	proto.RegisterType((*BasketMetadata)(nil), "celestia.lst.v1.BasketMetadata")
}

func init() { proto.RegisterFile("celestia/lst/v1/basket.proto", fileDescriptor_cb2e83b17a501f02) }

var fileDescriptor_cb2e83b17a501f02 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x8f, 0xd2, 0x40,
	0x14, 0xc7, 0x29, 0xb0, 0xec, 0x3a, 0xac, 0xbb, 0x32, 0xa2, 0xa9, 0xab, 0x96, 0x8a, 0x17, 0x12,
	0x43, 0x1b, 0xf0, 0xe8, 0x49, 0xb2, 0x31, 0x21, 0x51, 0x0f, 0x5d, 0xa2, 0x89, 0x26, 0x92, 0xa1,
	0x9d, 0x94, 0x09, 0x9d, 0x0e, 0xe9, 0x3c, 0x51, 0xfe, 0x0b, 0xff, 0x10, 0x8f, 0xdc, 0xbd, 0xee,
	0x71, 0xc3, 0xc9, 0x78, 0xd8, 0x18, 0xf8, 0x47, 0x0c, 0x33, 0x53, 0xc2, 0xb2, 0x37, 0x2f, 0xcd,
	0x9b, 0xf7, 0xe3, 0xd3, 0xef, 0xbc, 0xf7, 0x06, 0x3d, 0x09, 0x69, 0x42, 0x25, 0x30, 0xe2, 0x27,
	0x12, 0xfc, 0x59, 0xc7, 0x1f, 0x11, 0x39, 0xa1, 0xe0, 0x4d, 0x33, 0x01, 0x02, 0x9f, 0xe6, 0x51,
	0x2f, 0x91, 0xe0, 0xcd, 0x3a, 0x67, 0xf5, 0x58, 0xc4, 0x42, 0xc5, 0xfc, 0x8d, 0xa5, 0xd3, 0xce,
	0x1e, 0x85, 0x42, 0x72, 0x21, 0x87, 0x3a, 0xa0, 0x0f, 0x26, 0x54, 0x23, 0x9c, 0xa5, 0xc2, 0x57,
	0x5f, 0xed, 0x6a, 0xfe, 0x2a, 0xa1, 0x4a, 0x4f, 0xfd, 0x05, 0x9f, 0xa0, 0x22, 0x8b, 0x6c, 0xcb,
	0xb5, 0x5a, 0x77, 0x82, 0x22, 0x8b, 0x70, 0x1d, 0x1d, 0x44, 0x34, 0x15, 0xdc, 0x2e, 0x2a, 0x97,
	0x3e, 0xe0, 0x37, 0x08, 0xcd, 0x48, 0xc2, 0x22, 0x02, 0x22, 0x93, 0x76, 0xc9, 0x2d, 0xb5, 0xaa,
	0x5d, 0xd7, 0xdb, 0x93, 0xe6, 0x7d, 0xc8, 0x53, 0x3e, 0x52, 0x16, 0x8f, 0xa1, 0x57, 0xbe, 0xbc,
	0x6e, 0x14, 0x82, 0x9d, 0x4a, 0x3c, 0x40, 0xc7, 0x20, 0x80, 0x24, 0x43, 0x39, 0x26, 0x19, 0x95,
	0x76, 0x79, 0xf3, 0x93, 0x5e, 0x67, 0x93, 0xf7, 0xe7, 0xba, 0xf1, 0x58, 0xeb, 0x96, 0xd1, 0xc4,
	0x63, 0xc2, 0xe7, 0x04, 0xc6, 0xde, 0x5b, 0x1a, 0x93, 0x70, 0x7e, 0x4e, 0xc3, 0xe5, 0xa2, 0x8d,
	0xcc, 0xb5, 0xce, 0x69, 0x18, 0x54, 0x15, 0xe6, 0x42, 0x51, 0xf0, 0x67, 0x74, 0xdf, 0x50, 0x81,
	0x4c, 0x68, 0x34, 0x04, 0x31, 0xa1, 0xa9, 0xb4, 0x0f, 0x14, 0xfc, 0x85, 0x81, 0x3f, 0xb8, 0x0d,
	0xef, 0xa7, 0xb0, 0x83, 0xed, 0xa7, 0x10, 0xd4, 0x34, 0x56, 0x61, 0x06, 0x8a, 0x82, 0xbb, 0xe8,
	0x30, 0xcc, 0xe8, 0x46, 0xbe, 0x5d, 0x51, 0x40, 0x7b, 0xb9, 0x68, 0xd7, 0x4d, 0xcd, 0xeb, 0x28,
	0xca, 0xa8, 0x94, 0x17, 0x90, 0xb1, 0x34, 0x0e, 0xf2, 0x44, 0xfc, 0x1c, 0xdd, 0x55, 0x26, 0x13,
	0xe9, 0x10, 0x18, 0xa7, 0xf6, 0xa1, 0x6b, 0xb5, 0x4a, 0xc1, 0x71, 0xee, 0x1c, 0x30, 0x4e, 0xf1,
	0x2b, 0x74, 0xc4, 0x29, 0x90, 0x88, 0x00, 0xb1, 0x8f, 0x5c, 0xab, 0x55, 0xed, 0x36, 0x6e, 0x75,
	0x54, 0x0f, 0xe9, 0x9d, 0x49, 0x0b, 0xb6, 0x05, 0xcd, 0x9f, 0x16, 0x3a, 0xdd, 0x6b, 0x37, 0x7e,
	0x8f, 0x6a, 0xdb, 0x56, 0x0f, 0x89, 0x56, 0xa6, 0x27, 0xdb, 0x7b, 0xb6, 0x5c, 0xb4, 0x9f, 0x1a,
	0xcd, 0xdb, 0xb2, 0x9b, 0xe2, 0xef, 0xcd, 0xf6, 0xfc, 0xb8, 0x8f, 0x2a, 0xdf, 0x14, 0x59, 0xef,
	0xc2, 0xff, 0x8c, 0xc9, 0x00, 0x9a, 0x5f, 0xd0, 0xc9, 0xcd, 0xab, 0x60, 0x8c, 0xca, 0x29, 0xe1,
	0xd4, 0x6c, 0x9e, 0xb2, 0xb1, 0x8b, 0xaa, 0x11, 0x95, 0x61, 0xc6, 0xa6, 0x9b, 0x26, 0x99, 0x0d,
	0xdc, 0x75, 0xe1, 0x87, 0xa8, 0x22, 0xe7, 0x7c, 0x24, 0x12, 0xbb, 0xa4, 0x82, 0xe6, 0xd4, 0xeb,
	0x5f, 0xae, 0x1c, 0xeb, 0x6a, 0xe5, 0x58, 0x7f, 0x57, 0x8e, 0xf5, 0x63, 0xed, 0x14, 0xae, 0xd6,
	0x4e, 0xe1, 0xf7, 0xda, 0x29, 0x7c, 0xf2, 0x63, 0x06, 0xe3, 0xaf, 0x23, 0x2f, 0x14, 0xdc, 0xcf,
	0xbb, 0x2b, 0xb2, 0x78, 0x6b, 0xb7, 0xc9, 0x74, 0xea, 0x7f, 0x57, 0x4f, 0x0f, 0xe6, 0x53, 0x2a,
	0x47, 0x15, 0xf5, 0x44, 0x5e, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x24, 0xbe, 0x77, 0x97,
	0x03, 0x00, 0x00,
}

func (m *Basket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Basket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Basket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBasket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.CreationTime != 0 {
		i = encodeVarintBasket(dAtA, i, uint64(m.CreationTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.TotalStakedTokens.Size()
		i -= size
		if _, err := m.TotalStakedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalShares.Size()
		i -= size
		if _, err := m.TotalShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBasket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BasketMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasketMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasketMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBasket(dAtA []byte, offset int, v uint64) int {
	offset -= sovBasket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Basket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovBasket(uint64(l))
		}
	}
	l = m.TotalShares.Size()
	n += 1 + l + sovBasket(uint64(l))
	l = m.TotalStakedTokens.Size()
	n += 1 + l + sovBasket(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	if m.CreationTime != 0 {
		n += 1 + sovBasket(uint64(m.CreationTime))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovBasket(uint64(l))
	}
	return n
}

func (m *ValidatorWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovBasket(uint64(l))
	return n
}

func (m *BasketMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	return n
}

func sovBasket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBasket(x uint64) (n int) {
	return sovBasket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Basket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Basket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Basket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, ValidatorWeight{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalStakedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &BasketMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasketMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasketMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasketMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBasket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBasket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBasket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBasket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBasket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBasket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBasket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBasket = fmt.Errorf("proto: unexpected end of group")
)
